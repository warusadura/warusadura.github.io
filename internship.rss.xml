<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dhanuka's web log - Internship</title><link href="https://warusadura.github.io/" rel="alternate"></link><link href="https://warusadura.github.io/internship.rss.xml" rel="self"></link><id>https://warusadura.github.io/</id><updated>2023-08-27T12:40:00+05:30</updated><entry><title>GSoC 23: Contributing to Checkpoint and Restore in Userspace (CRIU) - Final report</title><link href="https://warusadura.github.io/gsoc23-final-report.html" rel="alternate"></link><published>2023-08-27T12:40:00+05:30</published><updated>2023-08-27T12:40:00+05:30</updated><author><name>Dhanuka</name></author><id>tag:warusadura.github.io,2023-08-27:/gsoc23-final-report.html</id><summary type="html">&lt;p&gt;The purpose of writing this blog post is to share the work I have completed during the past 12 weeks of Google Summer of Code 2023.&lt;/p&gt;
&lt;h4&gt;Summary&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Project: &lt;a href="https://summerofcode.withgoogle.com/archive/2023/projects/uEaniQVU"&gt;CRIU: Add support for memfd_secret file descriptors&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Feature implementation status: &lt;strong&gt;&lt;code&gt;Complete&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Feature implementation Pull Request: &lt;a href="https://github.com/checkpoint-restore/criu/pull/2247"&gt;https://github.com/checkpoint-restore/criu/pull/2247 …&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;The purpose of writing this blog post is to share the work I have completed during the past 12 weeks of Google Summer of Code 2023.&lt;/p&gt;
&lt;h4&gt;Summary&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Project: &lt;a href="https://summerofcode.withgoogle.com/archive/2023/projects/uEaniQVU"&gt;CRIU: Add support for memfd_secret file descriptors&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Feature implementation status: &lt;strong&gt;&lt;code&gt;Complete&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Feature implementation Pull Request: &lt;a href="https://github.com/checkpoint-restore/criu/pull/2247"&gt;https://github.com/checkpoint-restore/criu/pull/2247&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Feature implementation patch acceptance to upstream status: &lt;strong&gt;&lt;code&gt;WIP&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Complete code contributions list: &lt;a href="https://github.com/checkpoint-restore/criu/commits?author=warusadura"&gt;https://github.com/checkpoint-restore/criu/commits?author=warusadura&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Detailed Report&lt;/h4&gt;
&lt;p&gt;As stated in the CRIU project GitHub &lt;a href="https://github.com/checkpoint-restore/criu/"&gt;page&lt;/a&gt;, "CRIU (stands for Checkpoint and Restore in Userspace) is a utility to checkpoint/restore Linux tasks. Using this tool, you can freeze a running application (or part of it) and checkpoint it to a hard drive as a collection of files. You can then use the files to restore and run the application from the point it was frozen at".&lt;/p&gt;
&lt;p&gt;CRIU can checkpoint/restore a trivial hello_word process to running Linux containers. However, with the current implementation of CRIU, it can't checkpoint/restore a process that has a &lt;code&gt;memfd_secret&lt;/code&gt; file descriptor(s) opened. So, my project was to implement this feature. Before we proceed, let's try to comprehend, what a &lt;code&gt;memfd_secret&lt;/code&gt; file descriptor is.&lt;/p&gt;
&lt;p&gt;As stated in the &lt;code&gt;man&lt;/code&gt; &lt;a href="https://manpages.debian.org/unstable/manpages-dev/memfd_secret.2.en.html"&gt;page&lt;/a&gt; of &lt;code&gt;memfd_secret()&lt;/code&gt; system call, "&lt;code&gt;memfd_secret()&lt;/code&gt; creates an anonymous RAM‐based file and returns a file descriptor that refers to it. The file provides a way to create and access memory regions with stronger  protection than usual RAM‐based files and anonymous memory mappings".&lt;/p&gt;
&lt;p&gt;Consider the following code example: &lt;code&gt;dumpee&lt;/code&gt;,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;sys/mman.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;sys/syscall.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define SECRET &amp;quot;Hello World&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#define SIZE 11&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;memfd_secret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;syscall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SYS_memfd_secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;secret_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;secretmem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;memfd_secret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;secretmem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ftruncate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;secretmem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;secretmem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PROT_READ&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PROT_WRITE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MAP_SHARED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;secretmem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MAP_FAILED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;secretmem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;secretmem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;secret_fini&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;mem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;munmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;secretmem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pid: %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;secretmem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;secret_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIZE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;secretmem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;not supported operation&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;secretmem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SECRET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SIZE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d bytes of secret data stored successfully at %p&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;secretmem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;pause&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;secret_fini&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;secretmem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SIZE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;secret data successfully discarded&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Essentially, what this program does is, write a string constant: &lt;code&gt;Hello World&lt;/code&gt; into &lt;code&gt;secretmem&lt;/code&gt; area denoted by &lt;code&gt;memfd_secret&lt;/code&gt; file descriptor and pause.&lt;/p&gt;
&lt;p&gt;There is a good chance that you can't run this code and get an runtime error like &lt;code&gt;Function not implemented&lt;/code&gt;. This is because the &lt;code&gt;secretmem&lt;/code&gt; feature is off by default and the user must explicitly enable it at the boot time by setting the Kernel boot parameter, &lt;code&gt;secretmem.enable=1&lt;/code&gt; to enable the &lt;code&gt;memfd_secret()&lt;/code&gt; system call.&lt;/p&gt;
&lt;p&gt;Let's execute this program program and examine its file descriptors,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;./dumpee
pid: 186078
11 bytes of secret data stored successfully at 0x7ff75e817000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ls /proc/186078/fd/
0  1  2  3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Process &lt;code&gt;186078&lt;/code&gt; has three file descriptors attached to it. As any Linux process, it has the usual &lt;code&gt;stdin: 0&lt;/code&gt;, &lt;code&gt;stdout: 1&lt;/code&gt;, &lt;code&gt;stderr: 2&lt;/code&gt; attached to it. Let's examine what's the &lt;code&gt;3&lt;/code&gt;rd file descriptor is suppose to be,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;186078&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;186078&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;secretmem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deleted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;Blocks&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;IO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;symbolic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;
&lt;span class="n"&gt;Device&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Inode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1000267&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;Links&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Access&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mo"&gt;0700&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lrwx&lt;/span&gt;&lt;span class="o"&gt;------&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Uid&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dhanuka&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;Gid&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dhanuka&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Access&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2023&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;51.819442448&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mo"&gt;0530&lt;/span&gt;
&lt;span class="n"&gt;Modify&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2023&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;49.807432713&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mo"&gt;0530&lt;/span&gt;
&lt;span class="n"&gt;Change&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2023&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;49.807432713&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mo"&gt;0530&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Birth&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As shown the file descriptor &lt;code&gt;3&lt;/code&gt; can be identified as &lt;code&gt;memfd_secret&lt;/code&gt; file descriptor (pointing to &lt;code&gt;secretmem&lt;/code&gt;). Since now we have a &lt;code&gt;memfd_secret&lt;/code&gt; file descriptor containing process: &lt;code&gt;186078&lt;/code&gt;, let's try to checkpoint it with the &lt;a href="https://github.com/checkpoint-restore/criu/releases/tag/v3.18"&gt;latest&lt;/a&gt; CRIU release,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;checkout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;criu&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;dev&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;criu&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;criu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt;
&lt;span class="nx"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m m-Double"&gt;3.18&lt;/span&gt;

&lt;span class="nx"&gt;sudo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;criu&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;criu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;dump&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;D&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;dumpdir&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;186078&lt;/span&gt;
&lt;span class="nx"&gt;Error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;criu&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;proc_parse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;467&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Unknown&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;shit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100600&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;secretmem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;deleted&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nx"&gt;Error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;criu&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;proc_parse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;694&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Can&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;186078&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mapfile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="nx"&gt;ff75e817000&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;No&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;such&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;device&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;
&lt;span class="nx"&gt;Error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;criu&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;cr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1558&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Collect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mappings&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;186078&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;failed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nx"&gt;Error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;criu&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;cr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2093&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Dumping&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;FAILED&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As shown the checkpoint operation fails. Because, during a checkpoint operation (among other things) CRIU attempts to dump/save all the file descriptors attached to the process. In this case one file descriptor is &lt;code&gt;memfd_secret()&lt;/code&gt;. Since CRIU doesn't understand (yet) how to parse a &lt;code&gt;memfd_secret()&lt;/code&gt; file descriptor, the checkpoint operation fails with the subtle &lt;code&gt;Unknown shit&lt;/code&gt; error.&lt;/p&gt;
&lt;p&gt;Now for the exciting part, let's try to checkpoint the &lt;code&gt;186078&lt;/code&gt; process with CRIU with my feature implementation in place,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git checkout memfd-secret

sudo ./criu/criu dump -D dumpdir/ -v4 --shell-job -t 186078

...........
(00.225313) Writing image inventory (version 1)
(00.225403) Running post-dump scripts
(00.225408) Unfreezing tasks into 2
(00.225411)     Unseizing 186078 into 2
(00.225565) Writing stats
(00.225619) Dumping finished successfully
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As shown the checkpoint operation succeeds. After a successful checkpoint operation, it's recommended to check the &lt;code&gt;dumpdir&lt;/code&gt; directory to verify how the checkpoint operation went,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ls dumpdir
core-186078.img  inventory.img                  pages-1.img  timens-0.img
fdinfo-2.img     memfd-secret.img               pages-2.img  tty-info.img
files.img        mm-186078.img                  pstree.img
fs-186078.img    pagemap-186078.img             seccomp.img
ids-186078.img   pagemap-secretmem-1000258.img  stats-dump
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;dumpdir/pages-1.img&lt;/code&gt; is a file of interest. Let's examine it,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;hexdump -C dumpdir/pages-1.img 
00000000  48 65 6c 6c 6f 20 57 6f  72 6c 64 00 00 00 00 00  |Hello World.....|
00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
&lt;span class="k"&gt;*&lt;/span&gt;
00001000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Evidently, we have our &lt;code&gt;secretmem&lt;/code&gt; content: &lt;code&gt;Hello World&lt;/code&gt; in &lt;code&gt;dumpdir/pages-1.img&lt;/code&gt;. So, the checkpoint operation is a success. Now let's try to restore this checkpointed process,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo ./criu/criu restore -D dumpdir/ -v4 --shell-job

...........
(00.041186) Running pre-resume scripts
(00.041202) Restore finished successfully. Tasks resumed.
(00.041209) Writing stats
(00.041342) Running post-resume scripts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As shown, the restore operation succeeds as well. Let's look for this restored process and examine its file descriptors to verify the accuracy of the restore operation,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pgrep dumpee
186078

ls /proc/186078/fd
0  1  2  3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Evidently we have the same exact number of file descriptors attached to the restored process: &lt;code&gt;186078&lt;/code&gt;. Let's examine the file descriptor &lt;code&gt;3&lt;/code&gt; to see whether it's a &lt;code&gt;memfd_secret&lt;/code&gt; file descriptor or not.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;186078&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;186078&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;secretmem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deleted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;Blocks&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;IO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Block&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;symbolic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;
&lt;span class="n"&gt;Device&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Inode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1037589&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;Links&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Access&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mo"&gt;0700&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lrwx&lt;/span&gt;&lt;span class="o"&gt;------&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Uid&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dhanuka&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;Gid&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dhanuka&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Access&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2023&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;07&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;25.787215250&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mo"&gt;0530&lt;/span&gt;
&lt;span class="n"&gt;Modify&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2023&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;07&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;24.019204721&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mo"&gt;0530&lt;/span&gt;
&lt;span class="n"&gt;Change&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2023&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;07&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;24.019204721&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mo"&gt;0530&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Birth&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Bingo! The file descriptor &lt;code&gt;3&lt;/code&gt; is indeed &lt;code&gt;memfd_secret&lt;/code&gt;! However, the restored process verification is not over yet. We have one last thing to check for. That's if the original &lt;code&gt;secretmem&lt;/code&gt; content/data: &lt;code&gt;Hello World&lt;/code&gt; is in this restored process's &lt;code&gt;secretmem&lt;/code&gt; area pointed by the &lt;code&gt;3&lt;/code&gt;rd file descriptor or not. To do that let's perform a secondary checkpoint (to a new directory) against this restored process: &lt;code&gt;186078&lt;/code&gt; and examine the content of &lt;code&gt;pages-1.img&lt;/code&gt; file,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pgrep dumpee
186078

sudo criu dump -D dumpdir2/ -v4 --shell-job -t 186078

hexdump -C dumpdir2/pages-1.img 
00000000  48 65 6c 6c 6f 20 57 6f  72 6c 64 00 00 00 00 00  |Hello World.....|
00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
&lt;span class="k"&gt;*&lt;/span&gt;
00001000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Evidently, not only the restored process has a &lt;code&gt;memfd_secret&lt;/code&gt; file descriptor attached to it, but also the original &lt;code&gt;secretmem&lt;/code&gt; content: &lt;code&gt;Hello World&lt;/code&gt;. So, the feature implementation is fully &lt;strong&gt;&lt;code&gt;complete&lt;/code&gt;&lt;/strong&gt; and it &lt;strong&gt;&lt;code&gt;works&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Closing thoughts&lt;/h4&gt;
&lt;p&gt;I had a phenomenal experience working on this project under the mentorship of &lt;a href="https://github.com/mihalicyn"&gt;Alexander Mikhalitsyn&lt;/a&gt; and &lt;a href="https://github.com/rppt"&gt;Mike Rapoport&lt;/a&gt;. Initially, I knew nothing about CRIU or &lt;code&gt;secretmem&lt;/code&gt;. I had to learn everything on the fly. It wasn't easy. But, I had help from my mentors and CRIU is an extremely well engineered project. The feature implementation was an iterative process. All I had to do was follow and fix one error at a time. In between I have learned how to read complex code: weird looking macros to complex function implementations, and debug and fix tricky errors. Overall, this was an enormous opportunity for me and I'm truly grateful for my mentors for their support and guidance.&lt;/p&gt;
&lt;p&gt;Stay tuned for my next blog post.&lt;/p&gt;</content><category term="Internship"></category></entry><entry><title>GSoC 21: Final report</title><link href="https://warusadura.github.io/gsoc21-final-report.html" rel="alternate"></link><published>2021-08-19T12:40:00+05:30</published><updated>2021-08-19T12:40:00+05:30</updated><author><name>Dhanuka</name></author><id>tag:warusadura.github.io,2021-08-19:/gsoc21-final-report.html</id><summary type="html">&lt;p&gt;This is my last GSoC blog post. And the purpose of writing this blog post is to share the work I have completed during the past 10 weeks of Google Summer of Code 2021.&lt;/p&gt;
&lt;h4&gt;Google Summer of Code 2021 Report:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Project: &lt;a href="https://summerofcode.withgoogle.com/projects/#4610209823064064"&gt;GNOME/libsecret: Extend file backend to use TPM2 derived …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This is my last GSoC blog post. And the purpose of writing this blog post is to share the work I have completed during the past 10 weeks of Google Summer of Code 2021.&lt;/p&gt;
&lt;h4&gt;Google Summer of Code 2021 Report:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Project: &lt;a href="https://summerofcode.withgoogle.com/projects/#4610209823064064"&gt;GNOME/libsecret: Extend file backend to use TPM2 derived encryption keys&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The current implementation of libsecret's file backend uses an encryption key derived from the user's login password. Security wise this not an ideal situation. Because, the entire security of the file backend relies on the user's login password (single point of failure). This situation can be improved if the keys are protected/generated by hardware. A Trusted Platform Module (TPM) is a cryptographic hardware security module (a microcontroller) that's present on modern consumer notebooks. The proposed work involves extending current libsecret file backend design to work with a TPM.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GSoC project status: &lt;a href="https://gitlab.gnome.org/Teams/Engagement/gsoc-2021/-/issues/13"&gt;&lt;strong&gt;&lt;code&gt;Completed&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Main repository: &lt;a href="https://gitlab.gnome.org/GNOME/libsecret/"&gt;https://gitlab.gnome.org/GNOME/libsecret/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read-only mirror: &lt;a href="https://github.com/GNOME/libsecret"&gt;https://github.com/GNOME/libsecret&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Project update talk: &lt;a href="https://youtu.be/DjmL5YbcPEQ?t=6178"&gt;https://youtu.be/DjmL5YbcPEQ?t=6178&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slides: &lt;a href="https://warusadura.github.io/slides/libsecret-project-update-by-Dhanuka.pdf"&gt;{static}/slides/libsecret-project-update-by-Dhanuka.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Toy project: &lt;a href="https://github.com/dnuka/tpmsecret"&gt;https://github.com/dnuka/tpmsecret&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Merge Requests list: &lt;a href="https://gitlab.gnome.org/GNOME/libsecret/-/merge_requests?scope=all&amp;amp;state=merged&amp;amp;author_username=dhanuka"&gt;https://gitlab.gnome.org/GNOME/libsecret/-/merge_requests?scope=all&amp;amp;state=merged&amp;amp;author_username=dhanuka&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Blog posts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://warusadura.github.io/gsoc21-internship.html"&gt;GSoC 21: Contributing to Gnome libsecret&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://warusadura.github.io/gsoc21-internship-update.html"&gt;GSoC 21: GNOME/libsecret project update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://warusadura.github.io/gsoc21-final-report.html"&gt;GSoC 21: Final report&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following section summarize all of the merge requests I have created. You can find more information on them using the attached links.&lt;/p&gt;
&lt;h4&gt;Merge Requests directly related to the GSoC Project.&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;merged:&lt;/code&gt;&lt;/strong&gt; &lt;a href="https://gitlab.gnome.org/GNOME/libsecret/-/merge_requests/86"&gt;Enable TPM emulator in CI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is my very first merge request directly related to the GSoC project. This enables the TPM emulator inside the CI environment. This is required for testing purposes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;merged:&lt;/code&gt;&lt;/strong&gt; &lt;a href="https://gitlab.gnome.org/GNOME/libsecret/-/merge_requests/87"&gt;Add --allow-root flag to tpm2-abrmd CI script&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Related to the above merge request. This fixes an issue related to the TPM emulator execution inside the CI.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;merged:&lt;/code&gt;&lt;/strong&gt; &lt;a href="https://gitlab.gnome.org/GNOME/libsecret/-/merge_requests/83"&gt;Add TPM2 API and its implementations to egg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is my most import work during the GSoC. This merge request defines the public TPM2 API for libsecret and adds its implementations to the incubation area (\egg directory). You can read more about this from my &lt;a href="https://warusadura.github.io/gsoc21-internship-update.html"&gt;project update blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;merged:&lt;/code&gt;&lt;/strong&gt; &lt;a href="https://gitlab.gnome.org/GNOME/libsecret/-/merge_requests/91"&gt;TPM2: Fix primary key generation in decrypting&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;During the integration task we have discovered a bug related to primary key generation when there is no primary key present. So, this MR fixes that issue.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;merged:&lt;/code&gt;&lt;/strong&gt; &lt;a href="https://gitlab.gnome.org/GNOME/libsecret/-/merge_requests/90"&gt;Add TPM2 integration to secret file backend&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the integration task. This merge request uses the newly define TPM2 API to extend the libsecret's file backend to use an encryption key derived from a TPM.&lt;/p&gt;
&lt;h4&gt;Other Merge Requests.&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;merged:&lt;/code&gt;&lt;/strong&gt; &lt;a href="https://gitlab.gnome.org/GNOME/libsecret/-/merge_requests/93"&gt;Fix deprecated-declaration warnings&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This merge request fixes the existing &lt;code&gt;deprecated-declarations&lt;/code&gt; warnings generated during the libsecret &lt;code&gt;build&lt;/code&gt; process.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;merged:&lt;/code&gt;&lt;/strong&gt; &lt;a href="https://gitlab.gnome.org/GNOME/libsecret/-/merge_requests/85"&gt;Remove autotools config file&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This merge request removes a left over &lt;code&gt;autotools&lt;/code&gt; configuration file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;merged:&lt;/code&gt;&lt;/strong&gt; &lt;a href="https://gitlab.gnome.org/GNOME/libsecret/-/merge_requests/69"&gt;Enable static analyzer in CI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Enables two static code analyzers: &lt;code&gt;clang-analyzer&lt;/code&gt; and &lt;code&gt;cppcheck&lt;/code&gt; inside the CI environment.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;merged:&lt;/code&gt;&lt;/strong&gt; &lt;a href="https://gitlab.gnome.org/GNOME/libsecret/-/merge_requests/73"&gt;Fix issues flagged by static analyzers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Related to the above merge request. This merge request fixes the issues flagged by &lt;code&gt;clang-analyzer&lt;/code&gt;, &lt;code&gt;cppcheck&lt;/code&gt; static analyzers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;merged:&lt;/code&gt;&lt;/strong&gt; &lt;a href="https://gitlab.gnome.org/GNOME/libsecret/-/merge_requests/70"&gt;Add bash-completion for secret-tool&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This merge request adds the &lt;code&gt;bash-completion&lt;/code&gt; to &lt;code&gt;secret-tool&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;merged:&lt;/code&gt;&lt;/strong&gt; &lt;a href="https://gitlab.gnome.org/GNOME/libsecret/-/merge_requests/72"&gt;Add meson option to override default bashcompdir&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Related to the above merge request. This merge request adds a new &lt;code&gt;meson&lt;/code&gt; option to disable installation of completion files into the system location.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;merged:&lt;/code&gt;&lt;/strong&gt; &lt;a href="https://gitlab.gnome.org/GNOME/libsecret/-/merge_requests/71"&gt;Trivial Fix: removes a comment&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Closing thoughts:&lt;/h4&gt;
&lt;p&gt;I have many things to say. So, I'll start with the internship experience,&lt;/p&gt;
&lt;p&gt;During my internship period I was able to accomplish many things. Completion of the project &lt;strong&gt;11&lt;/strong&gt; days before the deadline is at the top. Honestly, I'm not a coding genius or anything. I was able to do this because, of my mentors &lt;a href="https://github.com/ueno"&gt;Daiki Ueno&lt;/a&gt; and &lt;a href="https://github.com/ansasaki"&gt;Anderson Sasaki&lt;/a&gt;. They both have dedicated an enormous amount of their time every single day to help with my questions. Yes, every single day. They even helped me to prepare for my very first presentation. As a student from an online peer learning based university (UoPeople) I don't get to learn from a professor/instructor. Talking with my GSoC mentors was the closest professor, student experience I ever had. So, I'm truly grateful for their support and guidance. I couldn't have done any of these without their guidance. Also, I would very much like to thank, upstream TSS developers for helping me out with all things related to TPMs. And thank you GNOME GSoC admins.&lt;/p&gt;
&lt;p&gt;As for the things I have learned during the internship,&lt;/p&gt;
&lt;p&gt;In my early stage of the internship, I knew nothing about libsecret, computer security, cryptography or TPMs. I just knew some C programming. So, I had to learn everything related to the project while contributing. Very recently I got to learn about C memory issues/memory leaks. Finding memory leaks and fixing them was a fun experience. I don't get why many engineers complains about them everyday on Hacker News :) Also, I got to learn about the aspects of a software engineering job. Like how/when they work and what's their day to day workflow is like, code reviews ... Overall, I think it's more than fair to say that I have learned a great deal of many things from my GSoC internship.&lt;/p&gt;
&lt;p&gt;So, If you're a someone who's thinking about applying for the next iteration of GSoC. Go ahead, it will most certainly will make a huge impact on you. I guarantee it.&lt;/p&gt;</content><category term="Internship"></category></entry><entry><title>GSoC 21: GNOME/libsecret project update</title><link href="https://warusadura.github.io/gsoc21-internship-update.html" rel="alternate"></link><published>2021-08-09T19:50:00+05:30</published><updated>2021-08-09T19:50:00+05:30</updated><author><name>Dhanuka</name></author><id>tag:warusadura.github.io,2021-08-09:/gsoc21-internship-update.html</id><summary type="html">&lt;p&gt;I have a plenty of stuff to talk about. But, first let's talk about my GSoC &lt;a href="https://warusadura.github.io/gsoc21-internship.html"&gt;project&lt;/a&gt; update.&lt;/p&gt;
&lt;h4&gt;Project update:&lt;/h4&gt;
&lt;p&gt;As of now I'm two weeks away from GSoC final project evaluation deadline (August 23rd). So, I'm a bit late for the project update blog post. A quick reminder, my …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have a plenty of stuff to talk about. But, first let's talk about my GSoC &lt;a href="https://warusadura.github.io/gsoc21-internship.html"&gt;project&lt;/a&gt; update.&lt;/p&gt;
&lt;h4&gt;Project update:&lt;/h4&gt;
&lt;p&gt;As of now I'm two weeks away from GSoC final project evaluation deadline (August 23rd). So, I'm a bit late for the project update blog post. A quick reminder, my &lt;a href="https://gitlab.gnome.org/Teams/Engagement/gsoc-2021/-/issues/13"&gt;project&lt;/a&gt; is to integrate Trusted platform module (TPM) support into GNOME/&lt;a href="https://wiki.gnome.org/Projects/Libsecret"&gt;libsecret&lt;/a&gt;. I'm happy to report that 95% of the work are completed and &lt;a href="https://gitlab.gnome.org/GNOME/libsecret/-/merge_requests/90"&gt;integration&lt;/a&gt; is the only part that remains.&lt;/p&gt;
&lt;p&gt;Recently, I gave my very first talk regarding the very same topic; libsecret project update. You can find it from &lt;a href="https://youtu.be/DjmL5YbcPEQ?t=6178"&gt;here&lt;/a&gt;. As well as the slides from &lt;a href="https://warusadura.github.io/slides/libsecret-project-update-by-Dhanuka.pdf"&gt;here&lt;/a&gt; if you're interested.&lt;/p&gt;
&lt;p&gt;My work is focused on libsecret's local storage (file-backend). Which is a new feature that allows a user to store secrets in a file. Current libsecret file-backend design support two options to encrypt the secrets/passwords inside the file database (a file). Option one is only for test purposes. And option two is using the user's login password to encrypt the file database. This design has a single point of failure. If the user's login password get compromised, then the contents of the file database get compromised too. This situation could be improved if the password is protected by hardware. So, that's when a TPM comes into play. A TPM is a physical hardware security module that performs everyday cryptographic needs. To simply put, my work is to add a third option to libsecret's file-backend design that adds TPM support. With this in place, if an attacker needs to get hold of your secrets, then they must have physical access to your computer system. In most cases this an impossible situation.&lt;/p&gt;
&lt;p&gt;There are three APIs (API levels based on the abstraction) to work with a TPM. For our specific needs, we have &lt;a href="https://gitlab.gnome.org/GNOME/libsecret/-/issues/63"&gt;decided&lt;/a&gt; to work with the TSS Enhanced System API (ESAPI).&lt;/p&gt;
&lt;p&gt;The following is the proposed public API,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;EggTpm2Context &lt;span class="gs"&gt;*egg_tpm2_initialize               (GError *&lt;/span&gt;*);
void           egg_tpm2_finalize                  (EggTpm2Context *);
GBytes         &lt;span class="gs"&gt;*egg_tpm2_generate_master_password (EggTpm2Context *&lt;/span&gt;,
                                                   GError **);
GBytes         &lt;span class="gs"&gt;*egg_tpm2_decrypt_master_password  (EggTpm2Context *&lt;/span&gt;,
                                                   GBytes &lt;span class="gs"&gt;*,&lt;/span&gt;
&lt;span class="gs"&gt;                                                   GError *&lt;/span&gt;*);             
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Don't worry about &lt;code&gt;egg_&lt;/code&gt; prefix. It means the API and its implementations are in the &lt;a href="https://gitlab.gnome.org/GNOME/libsecret/-/tree/master/egg"&gt;incubation&lt;/a&gt; area. A place where newest/proposed features get included until they become a part of the official libsecret API or other GNOME libraries. Folks who have access to a TPM can test out these new changes by building from the &lt;a href="https://gitlab.gnome.org/GNOME/libsecret/"&gt;source&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Lessons learned:&lt;/h4&gt;
&lt;p&gt;In my early days of the internship, I have struggled a lot. Due to lack of TPM learning and API resources. I was at a stage where I couldn't even write a single line of code for days. That's when my mentors suggested to work on a &lt;a href="https://github.com/dnuka/tpmsecret"&gt;toy project&lt;/a&gt;. It was a huge success. So, when you're stuck with a complicated project, work on a minimal toy project.&lt;/p&gt;
&lt;p&gt;Always work with a design doc (a simple diagram). A design doc is a simple diagram that showcase what needs to implemented. It doesn't have to be long or a fancy one. Just include enough information to get started and update as you move forward.&lt;/p&gt;
&lt;p&gt;Apart from programming language proficiency. Git proficiency is a must. A lot of day to day programming related stress could be avoided if you're proficient in Git. So, learn Git thoroughly.&lt;/p&gt;
&lt;p&gt;Remember to include your contact information in your presentation slides.&lt;/p&gt;
&lt;p&gt;Stay tuned for my last GSoC blog post.&lt;/p&gt;</content><category term="Internship"></category></entry><entry><title>GSoC 21: Contributing to Gnome libsecret</title><link href="https://warusadura.github.io/gsoc21-internship.html" rel="alternate"></link><published>2021-06-20T18:50:00+05:30</published><updated>2021-06-20T18:50:00+05:30</updated><author><name>Dhanuka</name></author><id>tag:warusadura.github.io,2021-06-20:/gsoc21-internship.html</id><summary type="html">&lt;p&gt;I’m one of the Google Summer of Code (GSoC 2021) &lt;a href="https://summerofcode.withgoogle.com/organizations/5276176043474944/"&gt;interns&lt;/a&gt; contributing to the GNOME Foundation. And I'm contributing to the &lt;a href="https://gitlab.gnome.org/GNOME/libsecret/"&gt;libsecret&lt;/a&gt; project.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;libsecret is a library for storing and retrieving passwords and other secrets. It communicates with the "Secret Service" using DBus - &lt;a href="https://developer.gnome.org/libsecret/"&gt;gnome.org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To simply put, libsecret …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I’m one of the Google Summer of Code (GSoC 2021) &lt;a href="https://summerofcode.withgoogle.com/organizations/5276176043474944/"&gt;interns&lt;/a&gt; contributing to the GNOME Foundation. And I'm contributing to the &lt;a href="https://gitlab.gnome.org/GNOME/libsecret/"&gt;libsecret&lt;/a&gt; project.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;libsecret is a library for storing and retrieving passwords and other secrets. It communicates with the "Secret Service" using DBus - &lt;a href="https://developer.gnome.org/libsecret/"&gt;gnome.org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To simply put, libsecret is a credential/secret/password manager. libsecret has a feature that you can use to store secrets in a file database or simply a file. This file is encrypted. And the key to encrypt this file is derived from the user's login password. This not an ideal situation. Because, the entire security of the file database relies on the user's login password. This situation can be improved if the key[s] are protected by hardware. This is when a &lt;a href="https://en.wikipedia.org/wiki/Trusted_Platform_Module"&gt;TPM&lt;/a&gt; comes into play.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Trusted Platform Module (TPM, also known as ISO/IEC 11889) is an international standard for a secure cryptoprocessor, a dedicated microcontroller designed to secure hardware through integrated cryptographic keys - &lt;a href="https://en.wikipedia.org/wiki/Trusted_Platform_Module"&gt;Wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you don't know anything about the TPMs I'd recommend watching, &lt;a href="https://www.youtube.com/watch?v=XwaSyHJIos8"&gt;Using the TPM - It's Not Rocket Science (Anymore) - Johannes Holland &amp;amp; Peter Huewe&lt;/a&gt; talk on YouTube. TPM is a fantastic tool for everyday cryptographic scenarios. And it's not that hard to use thanks to &lt;a href="https://github.com/tpm2-software/tpm2-tools"&gt;tpm2-tools&lt;/a&gt;. However, talking to a TPM via an API (or simply TPM programming) is not that simple. Actually, it's very similar to rocket science :) And there are no books or good developer resources on TPM programming. The lack of programming resources is a frustrating experience. However, the TPM developer community is fantastic. They have been helping me since day one.&lt;/p&gt;
&lt;p&gt;In simple terms, my goal is to &lt;a href="https://gitlab.gnome.org/Teams/Engagement/gsoc-2021/-/issues/13"&gt;extend&lt;/a&gt; current libsecret file database encryption-decryption functionality to work with a TPM. So, the TPM will handle key generation, wrapping-unwrapping of keys and key storage processes. This is very exciting work! Honestly, this was not the case in my early stage of contributing to libsecret. I knew nothing about libsecret, computer security, cryptography or TPMs. Thanks to both my mentors and upstream &lt;a href="https://github.com/tpm2-software/tpm2-tss"&gt;TSS&lt;/a&gt; (TPM Software Stack) developers, I'm confidently finding my way around the project. So, thank you &lt;a href="https://github.com/ueno"&gt;Daiki Ueno&lt;/a&gt; for guiding me through every step of the way from my initial contribution to making my final project proposal for GSoC. And thank you &lt;a href="https://github.com/ansasaki"&gt;Anderson Sasaki&lt;/a&gt; for helping me out with my questions every single day. Also, I would very much like to thank, upstream TSS developers &lt;a href="https://github.com/PeterHuewe"&gt;Peter Huewe&lt;/a&gt;, &lt;a href="https://github.com/flihp"&gt;Philip Tricca&lt;/a&gt; and &lt;a href="https://github.com/AndreasFuchsSIT"&gt;Andreas Fuchs&lt;/a&gt; for helping me out with all things related to TPMs.&lt;/p&gt;
&lt;p&gt;Stay tuned for my next blog post, "Hello World TPM!".&lt;/p&gt;</content><category term="Internship"></category></entry><entry><title>Ansible, Redfish and Sushy</title><link href="https://warusadura.github.io/openstack-project.html" rel="alternate"></link><published>2019-01-16T22:27:00+05:30</published><updated>2019-01-16T22:27:00+05:30</updated><author><name>Dhanuka</name></author><id>tag:warusadura.github.io,2019-01-16:/openstack-project.html</id><summary type="html">&lt;p&gt;In last December(2018), I started my Outreachy [1] internship at OpenStack working on "Create Redfish Ansible module" project. So, this is me trying to explain my project to someone completely new to this. Here goes,&lt;/p&gt;
&lt;p&gt;Ansible...&lt;/p&gt;
&lt;p&gt;IT automation includes processes and software that help in deploying and managing an …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In last December(2018), I started my Outreachy [1] internship at OpenStack working on "Create Redfish Ansible module" project. So, this is me trying to explain my project to someone completely new to this. Here goes,&lt;/p&gt;
&lt;p&gt;Ansible...&lt;/p&gt;
&lt;p&gt;IT automation includes processes and software that help in deploying and managing an IT infrastructure(servers, networking, storage, etc.). In short, Ansible [2] is a simple, agent-less and powerful open source IT automation tool. It uses a very simple language YAML [3] (YAML Ain't Markup Language) in form of &lt;code&gt;playbooks&lt;/code&gt; that allow you to describe your automation tasks in a way that approaches plain English. Also, Ansible doesn’t require any agent on client machines unlike other automation tools(Puppet, Chef, Salt). It uses just a SSH connection to connect the servers. Ansible requires Python to be installed on the client machines.&lt;/p&gt;
&lt;p&gt;Bellow a simple Ansible playbook(&lt;code&gt;install_apache.yaml&lt;/code&gt;) to install Apache HTTP Server on a Debian based remote server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;-&lt;/span&gt; hosts: all
  remote_user: root
  tasks:
    &lt;span class="k"&gt;-&lt;/span&gt; name: Install Apache
      apt:
        name: apache2
        state: latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To execute the playbook on a single server, you can use this command: &lt;code&gt;ansible-playbook -i 100.58.17.57, install_apache.yaml&lt;/code&gt;.
If you have 100 or more remote servers and you want to install &lt;code&gt;apache2&lt;/code&gt; on each of them, with Ansible you can automate this repetitive task using that same command. First, put remote IP addresses on a file(&lt;code&gt;HOSTS&lt;/code&gt;) and then execute &lt;code&gt;ansible-playbook -i HOSTS install_apache.yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Redfish...&lt;/p&gt;
&lt;p&gt;If you’re very much new to Cloud infrastructure related topics, just like me, you have probably never heard of the BMC [4] (baseboard management controller). BMC is a small computer that sits on every server motherboard and it's used to perform remote management tasks that a sysadmin would otherwise need to physically do on the racked server(power-on, reset, etc.). In shot, Redfish [5] is one of the newest protocols used to interact with the BMC. Redfish leverages common internet and web services standard to expose information directly to the modern tool chain. Redfish specifies a RESTFul [6] interface and utilizes defined JSON payloads, usable by client applications and browser based GUI.
Following Python code sample shows how to retrieve the serial number from a remote server using Redfish.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib.request&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlopen&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://100.58.17.57/redfish/v1/Systems/1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;json_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SerialNumber&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sushy and Sushy-tools...&lt;/p&gt;
&lt;p&gt;Sushy [7] is a client side Python implementation of the Redfish protocol and and it can be used to communicate with Redfish based systems.&lt;/p&gt;
&lt;p&gt;Sushy-tools [8] contains two emulators &lt;code&gt;sushy-static&lt;/code&gt; and &lt;code&gt;sushy-emulator&lt;/code&gt;, aiming at supporting the development and testing of the Redfish protocol implementations, in particular Sushy library. To simply put, Sushy-tools are the Redfish emulators(just like an Android emulator).&lt;/p&gt;
&lt;p&gt;The Project...&lt;/p&gt;
&lt;p&gt;From the previous &lt;code&gt;install_apache.yaml&lt;/code&gt; example(at &lt;code&gt;line 5&lt;/code&gt;) I'm using the &lt;code&gt;apt&lt;/code&gt; Ansible module. Ansible &lt;code&gt;modules&lt;/code&gt; are just piece of code that can be
written in any language(but mostly written in Python) with the condition that its output needs to be in the &lt;code&gt;JSON&lt;/code&gt; format. My project is to create a new custom Redfish, Ansible module to automate the power and boot process of a remote server and to make sure those features work correctly on both module side and in the &lt;code&gt;sushy-emulator&lt;/code&gt;. Also, update existing Redfish, Ansible modules [9], [10] to work properly in the &lt;code&gt;sushy-emulator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;[1] &lt;a href="https://dnuka.github.io/openstack-internship.html"&gt;https://dnuka.github.io/openstack-internship.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] &lt;a href="https://github.com/ansible/ansible"&gt;https://github.com/ansible/ansible&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3] &lt;a href="https://yaml.org/"&gt;https://yaml.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[4] &lt;a href="https://en.wikipedia.org/wiki/Intelligent_Platform_Management_Interface#Baseboard_management_controller"&gt;https://en.wikipedia.org/wiki/Intelligent_Platform_Management_Interface#Baseboard_management_controller&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[5] &lt;a href="https://www.dmtf.org/standards/redfish"&gt;https://www.dmtf.org/standards/redfish&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[6] &lt;a href="https://www.codecademy.com/articles/what-is-rest"&gt;https://www.codecademy.com/articles/what-is-rest&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[7] &lt;a href="https://github.com/openstack/sushy"&gt;https://github.com/openstack/sushy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[8] &lt;a href="https://github.com/openstack/sushy-tools"&gt;https://github.com/openstack/sushy-tools&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[9] &lt;a href="https://github.com/ansible/ansible/tree/devel/lib/ansible/modules/remote_management/redfish"&gt;https://github.com/ansible/ansible/tree/devel/lib/ansible/modules/remote_management/redfish&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[10] &lt;a href="https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/redfish_utils.py"&gt;https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/redfish_utils.py&lt;/a&gt;&lt;/p&gt;</content><category term="Internship"></category></entry></feed>