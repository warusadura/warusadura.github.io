<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dhanuka's web log</title><link href="/" rel="alternate"></link><link href="/index.rss" rel="self"></link><id>/</id><updated>2019-01-16T22:27:00+05:30</updated><entry><title>Ansible, Redfish and Sushy</title><link href="/openstack-project.html" rel="alternate"></link><published>2019-01-16T22:27:00+05:30</published><updated>2019-01-16T22:27:00+05:30</updated><author><name>dnuka</name></author><id>tag:None,2019-01-16:/openstack-project.html</id><summary type="html">&lt;p&gt;In last December(2018), I started my Outreachy [1] internship at OpenStack working on "Create Redfish Ansible module" project. So, this is me trying to explain my project to someone completely new to this. Here goes,&lt;/p&gt;
&lt;p&gt;Ansible...&lt;/p&gt;
&lt;p&gt;IT automation includes processes and software that help in deploying and managing an …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In last December(2018), I started my Outreachy [1] internship at OpenStack working on "Create Redfish Ansible module" project. So, this is me trying to explain my project to someone completely new to this. Here goes,&lt;/p&gt;
&lt;p&gt;Ansible...&lt;/p&gt;
&lt;p&gt;IT automation includes processes and software that help in deploying and managing an IT infrastructure(servers, networking, storage, etc.). In short, Ansible [2] is a simple, agent-less and powerful open source IT automation tool. It uses a very simple language YAML [3] (YAML Ain't Markup Language) in form of &lt;code&gt;playbooks&lt;/code&gt; that allow you to describe your automation tasks in a way that approaches plain English. Also, Ansible doesn’t require any agent on client machines unlike other automation tools(Puppet, Chef, Salt). It uses just a SSH connection to connect the servers. Ansible requires Python to be installed on the client machines.&lt;/p&gt;
&lt;p&gt;Bellow a simple Ansible playbook(&lt;code&gt;install_apache.yaml&lt;/code&gt;) to install Apache HTTP Server on a Debian based remote server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- hosts: all
  remote_user: root
  tasks:
    - name: Install Apache
      apt:
        name: apache2
        state: latest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To execute the playbook on a single server, you can use this command: &lt;code&gt;ansible-playbook -i 100.58.17.57, install_apache.yaml&lt;/code&gt;.
If you have 100 or more remote servers and you want to install &lt;code&gt;apache2&lt;/code&gt; on each of them, with Ansible you can automate this repetitive task using that same command. First, put remote IP addresses on a file(&lt;code&gt;HOSTS&lt;/code&gt;) and then execute &lt;code&gt;ansible-playbook -i HOSTS install_apache.yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Redfish...&lt;/p&gt;
&lt;p&gt;If you’re very much new to Cloud infrastructure related topics, just like me, you have probably never heard of the BMC [4] (baseboard management controller). BMC is a small computer that sits on every server motherboard and it's used to perform remote management tasks that a sysadmin would otherwise need to physically do on the racked server(power-on, reset, etc.). In shot, Redfish [5] is one of the newest protocols used to interact with the BMC. Redfish leverages common internet and web services standard to expose information directly to the modern tool chain. Redfish specifies a RESTFul [6] interface and utilizes defined JSON payloads, usable by client applications and browser based GUI.
Following Python code sample shows how to retrieve the serial number from a remote server using Redfish.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib.request&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlopen&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://100.58.17.57/redfish/v1/Systems/1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;json_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SerialNumber&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sushy and Sushy-tools...&lt;/p&gt;
&lt;p&gt;Sushy [7] is a client side Python implementation of the Redfish protocol and and it can be used to communicate with Redfish based systems.&lt;/p&gt;
&lt;p&gt;Sushy-tools [8] contains two emulators &lt;code&gt;sushy-static&lt;/code&gt; and &lt;code&gt;sushy-emulator&lt;/code&gt;, aiming at supporting the development and testing of the Redfish protocol implementations, in particular Sushy library. To simply put, Sushy-tools are the Redfish emulators(just like an Android emulator).&lt;/p&gt;
&lt;p&gt;The Project...&lt;/p&gt;
&lt;p&gt;From the previous &lt;code&gt;install_apache.yaml&lt;/code&gt; example(at &lt;code&gt;line 5&lt;/code&gt;) I'm using the &lt;code&gt;apt&lt;/code&gt; Ansible module. Ansible &lt;code&gt;modules&lt;/code&gt; are just piece of code that can be
written in any language(but mostly written in Python) with the condition that its output needs to be in the &lt;code&gt;JSON&lt;/code&gt; format. My project is to create a new custom Redfish, Ansible module to automate the power and boot process of a remote server and to make sure those features work correctly on both module side and in the &lt;code&gt;sushy-emulator&lt;/code&gt;. Also, update existing Redfish, Ansible modules [9], [10] to work properly in the &lt;code&gt;sushy-emulator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;[1] &lt;a href="https://dnuka.github.io/openstack-internship.html"&gt;https://dnuka.github.io/openstack-internship.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] &lt;a href="https://github.com/ansible/ansible"&gt;https://github.com/ansible/ansible&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3] &lt;a href="https://yaml.org/"&gt;https://yaml.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[4] &lt;a href="https://en.wikipedia.org/wiki/Intelligent_Platform_Management_Interface#Baseboard_management_controller"&gt;https://en.wikipedia.org/wiki/Intelligent_Platform_Management_Interface#Baseboard_management_controller&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[5] &lt;a href="https://www.dmtf.org/standards/redfish"&gt;https://www.dmtf.org/standards/redfish&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[6] &lt;a href="https://www.codecademy.com/articles/what-is-rest"&gt;https://www.codecademy.com/articles/what-is-rest&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[7] &lt;a href="https://github.com/openstack/sushy"&gt;https://github.com/openstack/sushy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[8] &lt;a href="https://github.com/openstack/sushy-tools"&gt;https://github.com/openstack/sushy-tools&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[9] &lt;a href="https://github.com/ansible/ansible/tree/devel/lib/ansible/modules/remote_management/redfish"&gt;https://github.com/ansible/ansible/tree/devel/lib/ansible/modules/remote_management/redfish&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[10] &lt;a href="https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/redfish_utils.py"&gt;https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/redfish_utils.py&lt;/a&gt;&lt;/p&gt;</content></entry><entry><title>How I got my internship at OpenStack</title><link href="/openstack-internship.html" rel="alternate"></link><published>2018-12-14T20:53:00+05:30</published><updated>2018-12-14T20:53:00+05:30</updated><author><name>dnuka</name></author><id>tag:None,2018-12-14:/openstack-internship.html</id><summary type="html">&lt;p&gt;Folks, this is the story of, how I become one of 46 interns of &lt;a href="https://www.outreachy.org"&gt;Outreachy&lt;/a&gt; December 2018 to March 2019 round. English is not my mother tongue; please excuse any errors.&lt;/p&gt;
&lt;p&gt;A little background...&lt;/p&gt;
&lt;p&gt;My name is Dhanuka. I'm a 24 year old, self-taught software developer from Sri Lanka. What …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Folks, this is the story of, how I become one of 46 interns of &lt;a href="https://www.outreachy.org"&gt;Outreachy&lt;/a&gt; December 2018 to March 2019 round. English is not my mother tongue; please excuse any errors.&lt;/p&gt;
&lt;p&gt;A little background...&lt;/p&gt;
&lt;p&gt;My name is Dhanuka. I'm a 24 year old, self-taught software developer from Sri Lanka. What inspired me to get into Computer science and programming was the &lt;a href="https://www.scotthyoung.com/blog/myprojects/mit-challenge-2/"&gt;MIT Challenge&lt;/a&gt;. And also reading about the achievements of self-taught software developers from around the world. According to my &lt;a href="https://stackoverflow.com/users/4533771/dhanuka?tab=profile"&gt;stackoverflow&lt;/a&gt; I have been coding for more than three years. But, I could not get a single entry-level job or an internship. It's impossible to get a job at a tech company without a degree in Sri Lanka. All the internships and hackathons were only open to university students. Along the way, I had to take different jobs to provide for my family. My last job(two months back), I was a receptionist at a local hotel. It's not a good life to live. I always knew I could do something better with my life.&lt;/p&gt;
&lt;p&gt;My first hackathon...&lt;/p&gt;
&lt;p&gt;I was almost already given up on my goals. I didn't have anyways to get some professional experience. Last May, I got to know about &lt;a href="https://mozilla.github.io/global-sprint/"&gt;Mozilla's Global Sprint&lt;/a&gt;. An open-source 48-hour hackathon . Finally, something I could get in. Also, there was a local event, as usual, I could not get in :) But, I participated virtually anyway. So, the project I choose was a Python project. At that time I didn't know anything about Python. I was able to understand the basic Python syntax within 1-2 hours and how to setup the project. That's when I fall in love with the Python Programming language. And I made my first &lt;a href="https://github.com/ricklupton/floweaver/commit/a551e843110a3e27617b1d2a379a9179ceb056c7"&gt;pull request&lt;/a&gt;. At the end of the 48-hour hackathon, I was able to submit 3 PRs. I was very happy, that now I have 2 days of professional experience as a software developer. Also at the same time, I stumbled across Outreachy. Since then, I started to improve my Python skills and have been regularly checking the Outreachy's web site. Thinking about, "This is the perfect opportunity for someone like me. Will they give me a chance?"&lt;/p&gt;
&lt;p&gt;Applying to Outreachy...&lt;/p&gt;
&lt;p&gt;I had many doubts when submitting my initial application to Outreachy. Because, Previously Outreachy was only accepting Women, Transgender, Trans-men, genderqueer people and also my English writing is not that good. Finally, after 10 days of submitting my initial application I got, the conformation email from the Outreachy organizers, that I got in!! From this round Outreachy is open for all! Next is the project selection and contribution. So, I'm really interested in Computer Security and DevOps. When looking the project list, most of the projects were JavaScript. And really don't like JavaScript. It's just a personal preference. I like everything &lt;code&gt;noscript&lt;/code&gt;. So my choices were Git, Debian and OpenStack. So, I sent emails for mentors at those organizations. I got responses from everyone. It was very clear that mentors at the OpenStack were ready to accept contributions from Outreachy applicants, had created list of &lt;a href="https://storyboard.openstack.org/#!/story/2003853"&gt;tasks&lt;/a&gt; specially for the Outreachy applicant's so we can get familiar with OpenStack, specially with OpenStack &lt;a href="https://github.com/openstack/sushy"&gt;Sushy&lt;/a&gt; project and Redfish.&lt;/p&gt;
&lt;p&gt;Initial contribution to OpenStack...&lt;/p&gt;
&lt;p&gt;At first, I didn't know anything about the project. So I was terrified at first. My project is called Sushy, a Python library to communicate with Redfish based systems. When I started to contribute to the Sushy project, there was nothing much to set up on my side. You don't have to download or install too many things. And that's a good thing when you're a beginner. If you have Python installed on your system, you're pretty much good to go. Everything you need to know before contributing clearly documented &lt;a href="https://docs.openstack.org/infra/manual/developers.html"&gt;here&lt;/a&gt;. Still, I was afraid to make my first contribution. So, I had set up an IRC client and joined the &lt;code&gt;#openstack-ironic&lt;/code&gt; channel on Freenode. That's how I met my mentor &lt;a href="https://github.com/dtantsur"&gt;Dmitry Tantsur&lt;/a&gt;. I still remember that he was on a meeting that day, yet he answered every question I had and explained me the basics. With his guidance, I have submitted my very first &lt;a href="https://review.openstack.org/#/c/606125/"&gt;patch&lt;/a&gt;. Which added a String filed to a Python class and a bunch of unit testing to go with it. It was a very simple and small patch, for me it was a valuable learning experience and also a confidence builder. I learned about proper Git commit messages, Python unit testing, JSON schema.&lt;/p&gt;
&lt;p&gt;To complete the task &lt;code&gt;Product and ProtocolFeaturesSupported&lt;/code&gt;, one more patch was required. Also, I met my second mentor &lt;a href="https://github.com/etingof"&gt;Ilya Etingof&lt;/a&gt;. With the guidance of both my mentors, I have successfully completed my first task(2 patches). Outreachy requires at least one contribution to be eligible for the final application. At that time there were no any other Outreachy applicants contributing to the Sushy project. I was first. I was like, "I got this. That was easy" Also I had a full-time job as a receptionist. After a day later &lt;a href="https://twitter.com/gabrielasoriag"&gt;Gabriela Soria&lt;/a&gt; came along and submitted a much longer patch than me :) Then I was terrified, that I might miss this opportunity. You know like EMINEM said, "You only get one shot, opportunity comes once in a lifetime". The very next day I quit my job and started working on my second task. And then third and so on. By the time of final application deadline, I had submitted 7 &lt;a href="https://review.openstack.org/#/q/owner:%22Dhanuka+Warusadura%22+status:reviewed"&gt;patches&lt;/a&gt;. Nearly 1600 lines of code \o/.&lt;/p&gt;
&lt;p&gt;Victory day...&lt;/p&gt;
&lt;p&gt;It was really hard to wait for the results. Nov 16, Around 9:32 PM in Sri Lankan time, I got the email from the Outreachy organizers, "dnuka accepted for Outreachy". I have never ever felt this great before in my life. I think it was happiness. I didn't know what to do or what to say. I just picked up my motorcycle and driven away from home. I always knew that hard work pays off. But I have never experienced it before. When I got home, it was very early in the morning, I looked up the Outreachy &lt;a href="https://www.outreachy.org/alums/"&gt;alums&lt;/a&gt; page to see, who else got selected. Then there was Gabriela's name too. I was genuinely happy. We both made it! &lt;/p&gt;
&lt;p&gt;It's been only a few days, since the internship started. There's still a long way to go. Also, I'm planning to spend most of my stipend on putting myself through college. Possibly a part time Computer Science program.&lt;/p&gt;
&lt;p&gt;Final thoughts...&lt;/p&gt;
&lt;p&gt;I just want to thank my mentor, Ilya for all the advice that he gave me during the application period. I still remember very first advice he said to me "If you are motivated and persistent, you will definitely succeed". Also, I want to thank my mentor, Dmitry for guiding me through every step of the way from my initial contribution to making my final application. He also introduced me to the culture at the OpenStack Ironic team and Monday meetings. One of the things I really enjoy, saying good morning to everyone at the IRC channel. Also, I want to thank my friends at the OpenStack Ironic team. Specially &lt;a href="https://twitter.com/ashinclouds"&gt;Julia Kreger&lt;/a&gt;, Iury Gregory and Debayan Ray.&lt;/p&gt;
&lt;p&gt;A Big Thanks to &lt;a href="https://twitter.com/_sagesharp_"&gt;Sage Sharp&lt;/a&gt; and organizers at the Outreachy for creating this life-changing opportunity. Also, I want to thank our OpenStack coordinator &lt;a href="https://twitter.com/MahatiChamarthy"&gt;Mahati Chamarthy&lt;/a&gt; for the warm welcome to the OpenStack.&lt;/p&gt;
&lt;p&gt;You may be wondering why I did this; made this big article describing everything :) I just wanted to you to know that if I can do this, anyone out there struggling to get a job at tech, You can do definitely do this too. This is your opportunity; look no further than the &lt;a href="https://www.outreachy.org/"&gt;Outreachy&lt;/a&gt;.&lt;/p&gt;</content></entry><entry><title>Docker for Debian</title><link href="/docker-for-debain.html" rel="alternate"></link><published>2018-09-12T19:00:00+05:30</published><updated>2018-09-12T19:00:00+05:30</updated><author><name>dnuka</name></author><id>tag:None,2018-09-12:/docker-for-debain.html</id><summary type="html">&lt;p&gt;Docker is a computer program that performs operating-system-level virtualization, also known as "containerization". And this is the easiest way to get docker installed on your Debian OS. This involves downloading the &lt;code&gt;.deb&lt;/code&gt; file for your release and install it manually. You may need to download a new file each time …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Docker is a computer program that performs operating-system-level virtualization, also known as "containerization". And this is the easiest way to get docker installed on your Debian OS. This involves downloading the &lt;code&gt;.deb&lt;/code&gt; file for your release and install it manually. You may need to download a new file each time you want to upgrade Docker.&lt;/p&gt;
&lt;p&gt;Go to &lt;a href="https://download.docker.com/linux/debian/dists/"&gt;https://download.docker.com/linux/debian/dists/&lt;/a&gt;, choose your Debian version, browse to &lt;code&gt;pool/stable/&lt;/code&gt;, choose either &lt;code&gt;amd64&lt;/code&gt; or &lt;code&gt;armhf&lt;/code&gt;, and download the &lt;code&gt;.deb&lt;/code&gt; file for the Docker CE(Community Edition) version you want to install.&lt;/p&gt;
&lt;p&gt;Install Docker CE, changing the path below to the path where you downloaded the Docker package.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sudo dpkg -i /path/to/package.deb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Verify that Docker CE is installed correctly by running &lt;code&gt;docker version&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Disable docker running at startup.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo systemctl disable docker.service
$ sudo systemctl disable docker.socket
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use &lt;code&gt;systemctl start docker.service&lt;/code&gt; to start docker manually when you need.&lt;/p&gt;
&lt;p&gt;Install &lt;code&gt;docker-compose&lt;/code&gt; by &lt;code&gt;pip install docker-compose&lt;/code&gt;&lt;/p&gt;</content></entry><entry><title>Upgrading Debian to Unstable/Sid</title><link href="/upgrading-debian-to-unstable.html" rel="alternate"></link><published>2018-09-10T11:12:00+05:30</published><updated>2018-09-10T11:12:00+05:30</updated><author><name>dnuka</name></author><id>tag:None,2018-09-10:/upgrading-debian-to-unstable.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Debian Unstable (also known by its codename “Sid”)&lt;/em&gt; is not strictly a release, but rather a rolling development version of the Debian distribution containing the latest and greatest packages which have been introduced into the Debian system. If you are a hardcore developer or tester you should use this release …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Debian Unstable (also known by its codename “Sid”)&lt;/em&gt; is not strictly a release, but rather a rolling development version of the Debian distribution containing the latest and greatest packages which have been introduced into the Debian system. If you are a hardcore developer or tester you should use this release.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Don’t let the name fool you. While Debian Unstable might sometimes happen to introduce some bugs or regressions with it’s updates, it surely isn’t as ‘Unstable’ as name would suggest. Debian Unstable is made mostly of stable releases of software packages, not development versions as one might think at first.&lt;/p&gt;
&lt;p&gt;Biggest benefits of upgrading to Unstable are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fresh versions of OS base&lt;/li&gt;
&lt;li&gt;Fresh versions of packages (software, libraries, etc.)&lt;/li&gt;
&lt;li&gt;Latest bugfixes and security updates&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The Process&lt;/h3&gt;
&lt;p&gt;Debian doesn’t release sid installation images. Instead you need to install an earlier version of Debian and upgrade to sid. So go and grab the &lt;a href="https://www.debian.org/CD/torrent-cd/"&gt;latest stable iso&lt;/a&gt;, probably the amd64 one.&lt;/p&gt;
&lt;p&gt;Finally, burn the iso to a CD or add it to a USB stick, boot to it, and install Debian.&lt;/p&gt;
&lt;p&gt;Reboot into your freshly installed Debian, mount your hard drive, and login. Now it’s time to upgrade from stable to sid. Open a terminal and edit the &lt;code&gt;/etc/apt/sources.list&lt;/code&gt; file as root.&lt;/p&gt;
&lt;p&gt;It starts out looking like this:
        #&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="c"&gt;# deb cdrom:[Debian GNU/Linux 8 _Jessie_ - Official Snapshot amd64 LIVE/INSTALL Binary 20160124-16:11]/ jessie main&lt;/span&gt;

    &lt;span class="err"&gt;deb&lt;/span&gt; &lt;span class="err"&gt;cdrom:[Debian&lt;/span&gt; &lt;span class="err"&gt;GNU/Linux&lt;/span&gt; &lt;span class="err"&gt;8&lt;/span&gt; &lt;span class="err"&gt;_Jessie_&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt; &lt;span class="err"&gt;Official&lt;/span&gt; &lt;span class="err"&gt;Snapshot&lt;/span&gt; &lt;span class="err"&gt;amd64&lt;/span&gt; &lt;span class="err"&gt;LIVE/INSTALL&lt;/span&gt; &lt;span class="err"&gt;Binary&lt;/span&gt; &lt;span class="err"&gt;20160124-16:11]/&lt;/span&gt; &lt;span class="err"&gt;jessie&lt;/span&gt; &lt;span class="err"&gt;main&lt;/span&gt;

    &lt;span class="err"&gt;deb&lt;/span&gt; &lt;span class="err"&gt;http://security.debian.org/&lt;/span&gt; &lt;span class="err"&gt;jessie/updates&lt;/span&gt; &lt;span class="err"&gt;main&lt;/span&gt;
    &lt;span class="err"&gt;deb-src&lt;/span&gt; &lt;span class="err"&gt;http://security.debian.org/&lt;/span&gt; &lt;span class="err"&gt;jessie/updates&lt;/span&gt; &lt;span class="err"&gt;main&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can delete the cdrom comments, and also we can delete the security and updates repositories. Since we’re updating to sid, we get all of the latest versions of all packages, which already includes security updates. And finally, change the “jessie” to “sid”, so that the result file looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="err"&gt;deb&lt;/span&gt; &lt;span class="err"&gt;http://ftp.us.debian.org/debian/&lt;/span&gt; &lt;span class="err"&gt;sid&lt;/span&gt; &lt;span class="err"&gt;main&lt;/span&gt;
    &lt;span class="err"&gt;deb-src&lt;/span&gt; &lt;span class="err"&gt;http://ftp.us.debian.org/debian/&lt;/span&gt; &lt;span class="err"&gt;sid&lt;/span&gt; &lt;span class="err"&gt;main&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save and exit. Now, update all of the software. This will take awhile. And finally, reboot into sid.&lt;/p&gt;
&lt;p&gt;$ sudo apt-get update
        $ sudo apt-get dist-upgrade
        $ sudo apt-get autoremove
        $ sudo reboot&lt;/p&gt;
&lt;h3&gt;Finally&lt;/h3&gt;
&lt;p&gt;The Unstable repositories are updated every 6 hours. You can upgrade with &lt;code&gt;apt-get dist-upgrade&lt;/code&gt;, taking all the necessary precautions beforehand of course.&lt;/p&gt;</content></entry></feed>